import cv2检测所有音符按键
class 坐标类:
    def __init__(self):
        self.低音12坐标=[]
        self.中音12坐标=[]
        self.高音12坐标=[]
        # self.坐标数据处理()
        # self.蛋仔36键根据3个坐标计算所有键坐标(高音1坐标=(130,624), 高音2坐标=(421,624), 中音1坐标=(141,800))
        self.蛋仔36键根据图片计算所有键坐标()
    def 蛋仔36键根据图片计算所有键坐标(self):
        从左到右从上到下的按键坐标列表 = cv2检测所有音符按键.检测所有音符按键()
        for 索引, 坐标 in enumerate(从左到右从上到下的按键坐标列表):
            if 索引 % 3 == 0: self.高音12坐标.append((int(坐标[0]), int(坐标[1])))
            if 索引 % 3 == 1: self.中音12坐标.append((int(坐标[0]), int(坐标[1])))
            if 索引 % 3 == 2: self.低音12坐标.append((int(坐标[0]), int(坐标[1])))
    def 设置第几个八度对应的低音1中音2高音3元组(self,*args):
        '''
        参数：(4,1),(5,1),(6,2)
        表示第4个八度对应低音1,第5个八度对应低音1,第6个八度对应中音2
        返回一个字典，键是八度，值是123，对应低音1，中音2，高音3
        '''
        f = {}
        for 元组 in args:
            键, 值 = 元组
            f[键] = 值
        return f
    def 找到midi编号对应的坐标(self,midi编号,对应八度元组,键数=36):
        '''
        默认是36键，根据midi编号返回对应的坐标
        参数：(4,1),(5,1),(6,2)
        表示第4个八度对应低音1,第5个八度对应低音1,第6个八度对应中音2
        '''
        对应坐标的索引=midi编号%12+(对应八度元组[midi编号//12]-1)*12
        if 键数==36:
            坐标=self.返回36键坐标从低音到高音()[对应坐标的索引-1]
        elif 键数==48:
            pass
            # 坐标=self.返回48键坐标从低音到高音()[对应坐标的索引]
        return 坐标
    def 返回36键坐标从低音到高音(self)->list[tuple[int,int]]:
        return self.低音12坐标+self.中音12坐标+self.高音12坐标
    def 返回36键坐标从高音到低音(self)->list[tuple[int,int]]:
        return self.高音12坐标+self.中音12坐标+self.低音12坐标
    # 需要知道每个音符的坐标
    def 坐标数据处理(self):
        self.低音12坐标=[
        (507, 845),
        (673, 800),
        (880, 844),
        (1046, 801),
        (1233, 843),
        (1587, 847),
        (1755, 800),
        (1955, 847),
        (2122, 800),
        (2305, 847),
        (2474, 802),
        (2683, 844)
        ]
        self.中音12坐标=[
            (509, 1071),
            (500, 777),
            (648, 805),
            (785, 771),
            (923, 803),
            (1190, 809),
            (1318, 775),
            (1459, 811),
            (1590, 773),
            (1726, 811),
            (1853, 771),
            (2021, 799)
        ]
        self.高音12坐标=[
            (507, 845),
            (673, 800),
            (880, 844),
            (1046, 801),
            (1233, 843),
            (1587, 847),
            (1755, 800),
            (1955, 847),
            (2122, 800),
            (2305, 847),
            (2474, 802),
            (2683, 844)
        ]
    def 蛋仔36键根据3个坐标计算所有键坐标(self, 高音1坐标=(141,608), 高音2坐标=(420,607),中音1坐标=(144,781)):
        self.高音12坐标 = []
        self.中音12坐标 = []
        self.低音12坐标 = []
        高音1距离高音2坐标的水平距离 = 高音2坐标[0] - 高音1坐标[0]
        高音1距离中音1坐标的垂直距离 = 中音1坐标[1] - 高音1坐标[1]
        
        # 计算高音12个键的坐标
        for i in range(12):
            if i <= 4:
                x = int(高音1坐标[0] + i * 高音1距离高音2坐标的水平距离 // 2)
            else:
                x = int(高音1坐标[0] + (i+1) * (高音1距离高音2坐标的水平距离 // 2))
            self.高音12坐标.append((x, int(高音1坐标[1])))

        # 计算中音12个键的坐标
        for 坐标 in self.高音12坐标:
            self.中音12坐标.append((坐标[0], 坐标[1] + 高音1距离中音1坐标的垂直距离))
        
        # 计算低音12个键的坐标
        for 坐标 in self.中音12坐标:
            self.低音12坐标.append((坐标[0], 坐标[1] + 高音1距离中音1坐标的垂直距离))


def 测试():
    测试坐标类=坐标类()
    print(测试坐标类.返回36键坐标从低音到高音())
    print(测试坐标类.找到midi编号对应的坐标(61,{4:1,5:1,6:2}))
    print('返回36键坐标从低音到高音测试完成')
    print('找到midi编号对应的坐标测试完成')
    print('坐标测试完成')
if __name__ == '__main__':
    测试()
